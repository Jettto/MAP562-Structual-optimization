/* Geometric optimization of the shape of a cantilever */
load "medit"

verbosity = 0;

int Gamma=0,GammaN=2,GammaD=1,GammaS=3;

/* Border of the initial domain */
border left(t=0.0,1.0){x = 0.0; y = 1.0-t; label = GammaS;};
border down1(t=0.0,2.9){x = t; y = 0.0; label = Gamma;};
border down2(t=0.0,0.1){x = 2.9+t; y = 0.0; label = GammaD;};
border right(t=0.0,1.0){x = 3.0; y = t; label = Gamma;};
border up1(t=0.0,2.9){x = 3.0-t; y = 1; label = Gamma;};
border up2(t=0.0,0.1){x = 0.1-t; y = 1; label = GammaN;};
// border left1(t=0.0,0.1){x = 0.0; y = 1.0-t; label = GammaD;};
// border left2(t=0.1,0.9){x = 0.0; y = 1.0-t; label = Gamma;};
// border left3(t=0.9,1.0){x = 0.0; y = 1.0-t; label = GammaD;};
// border bottom(t=0.0,2.0){x=1.0/2.0*t; y= 0.2*t; label=Gamma;};
// border right(t=0.0,0.2){x = 1.0; y = 0.4+t; label = GammaN;};
// border top(t=0.0,2.0){x =1.0-1.0/2.0*t; y = 0.6+0.2*t; label = Gamma;};
border h1 (t=0.0,2.0*pi){x=0.2+0.05*cos(t); y=0.65+0.05*sin(t); label=Gamma;};
border h2 (t=0.0,2.0*pi){x=0.1+0.05*cos(t); y=0.5+0.05*sin(t); label=Gamma;};
border h3 (t=0.0,2.0*pi){x=1.5+0.05*cos(t); y=0.65+0.05*sin(t); label=Gamma;};
border h4 (t=0.0,2.0*pi){x=2.8+0.05*cos(t); y=0.2+0.05*sin(t); label=Gamma;};
border h5 (t=0.0,2.0*pi){x=0.6+0.05*cos(t); y=0.4+0.05*sin(t); label=Gamma;};
border h6 (t=0.0,2.0*pi){x=0.75+0.05*cos(t); y=0.5+0.05*sin(t); label=Gamma;};
border h7 (t=0.0,2.0*pi){x=0.6+0.05*cos(t); y=0.6+0.05*sin(t); label=Gamma;};

/* Create, then display initial mesh */
int nn=2;
mesh Th = buildmesh( left(10*nn) + down1(29*nn) + down2(nn) + right(10*nn) +
           up1(29*nn)+up2(nn)
           //+h1(-nn*pi)
           //+h2(-nn*pi)
           //+h3(-nn*pi)
           //+h4(-nn*pi)
           //+h5(-nn*pi)
            );
plot(Th,wait=1);


/* Parameters */
real eps = 1.e-6;
real gx = 0.0;
real gy = -1.0;
real mu = 0.3846;
real lambda = 0.5769;
real cply = 0.0;
real obj = 0.0,newobj = 0.0;
mesh Dh;
int nit = 200;

real gmax;
real coef = 0.1;
real coefmax = 0.2;
real coefmin = 0.01;
real step;
real chkvoltri;
real epsvoltri = 1.e-6;
real tol = 0.01;
real tgv = 1.e10;
real vol = 0.0;
real ell = 5.0;
real muel = 0.3846;
real lambdael = 0.5769;
string s;

/* Finite element spaces: P1 elements for the resolution of the linearized elasticity system */
fespace Vh(Th,P1);
fespace Vh0(Th,P0);

/* Functions */
Vh   ux,uy,vx,vy,grx,gry,ng,uox,uoy,chidir;
Vh0  gr0;

Vh0 hMax = hTriangle; // get sizes of all triangles
real meshsiz = hMax[].max; // get maximal triangle size
real alpha = (2.0*meshsiz)^2; //regularization parameter

macro div(ux,uy) (dx(ux)+dy(uy))//
real sqrt2 = sqrt(2);
macro e(ux,uy) [dx(ux),dy(uy),(dx(uy)+dy(ux))/sqrt2]//
macro grad(u) [dx(u),dy(u)]//
macro grad2(ux,uy) [dx(ux),dy(ux),dx(uy),dy(uy)]//
macro Aeueu(ux,uy) (2*mu*e(ux,uy)'*e(ux,uy)+lambda*div(ux,uy)*div(ux,uy))//


/* Linearized elasticity system */
//Try different solver:....
problem elas([ux,uy],[vx,vy],solver=Crout) =
  int2d(Th)( 2.0*mu*e(ux,uy)'*e(vx,vy)
              + lambda*div(ux,uy)*div(vx,vy) )
  - int1d(Th,GammaN)(gx*vx+gy*vy)
  + on(GammaD,uy=0.0)
  + on(GammaS,ux=0.0);

/* Localization function for nodes to be frozen */
//for small y and big y we dont want to move and the big x we dont change
//GammaD and GammaN
func real locdir() {
  if (  (x>2.89 && y<0.01)) return(1.0);
  else return(0.0);
}
chidir = locdir();

/* Tangential derivative */
macro Dt(u) [dx(u)-(dx(u)*N.x+dy(u)*N.y)*N.x,dy(u)-(dx(u)*N.x+dy(u)*N.y)*N.y] // EOM
//Three Extension possible defination

/* Extension / regularization problem */
//grx: Deformation
problem velext([grx,gry],[vx,vy],solver=Crout) =
  int2d(Th)(mu*(2.0*dx(grx)*dx(vx) + (dx(gry)+dy(grx))*(dx(vy)+dy(vx)) + 2.0*dy(gry)*dy(vy))
                + lambda*(dx(grx)+dy(gry))*(dx(vx)+dy(vy)) + (1.0+chidir*tgv)*(grx*vx+gry*vy) )  //elas problem
// alpha is for regularization
//gr0 is the correction derivative
  + int1d(Th,Gamma)( alpha*(Dt(grx)'*Dt(vx) + Dt(gry)'*Dt(vy)) ) //laplacian boundary
  - int1d(Th,Gamma)( gr0*(N.x*vx+N.y*vy) )  //shape derivative
  + on(GammaD,GammaN,GammaS,grx=0.0,gry=0.0); //GammaD and GammaN we dont change, zero component on the boundary

problem velext2([grx,gry],[vx,vy],solver=Crout) =
  //regularization, to avoid an external hole
  //if we delete this term, the mesh will move creazily
  int2d(Th)(grad2(grx,gry)'*grad2(vx,vy) //full gradient shape= 1*4
//  + int1d(Th,omega)( alpha*(Dt(grx)'*Dt(vx) + Dt(gry)'*Dt(vy)) )
 + (1.0+chidir*tgv)*(grx*vx+gry*vy) )
  - int1d(Th,Gamma)( gr0*(N.x*vx+N.y*vy) )
  + on(GammaN,grx=0.0,gry=0.0)
  + on(GammaD,gry=0.0)
  + on(GammaS,gry=0.0, grx=0.0);

problem velext3([grx,gry],[vx,vy],solver=Crout) =
  int2d(Th)(2*e(grx,gry)'*e(vx,vy)+0.5*div(grx,gry)*div(vx,vy)
//  + int1d(Th,omega)( alpha*(Dt(grx)'*Dt(vx) + Dt(gry)'*Dt(vy)) )
+(1.0+chidir*tgv)*(grx*vx+gry*vy) )
  - int1d(Th,Gamma)( gr0*(N.x*vx+N.y*vy) )
  + on(GammaN,GammaD,GammaS, grx=0.0,gry=0.0);


/* Objective function */
macro J() ( int1d(Th,GammaN)(gx*ux+gy*uy)) // EOM

///  int1d(Th,GammaN)(Aeueu(ux,uy))  compliance...

/* (Negative) shape gradient of J */
macro dJ() {
  gr0 = 2.0*mu*(dx(ux)*dx(ux) + 0.5*(dy(ux)+dx(uy))*(dy(ux)+dx(uy)) + dy(uy)*dy(uy)) + lambda*(dx(ux)+dy(uy))*(dx(ux)+dy(uy)) - ell;
  velext2;
} // EOM

/* Initialization */
elas;

/* Initial value of the objective function */
vol     = Th.area;
obj     = J + ell*vol;

/* Main optimization loop */
for(int n=0; n<nit; n++){

  /* Computation of the shape gradient as a P1 function and size of the time step */
  dJ;

  ng = sqrt(grx*grx+gry*gry);    //normal of the gradient
  gmax = ng[].max;               //maximal
  step = coef*meshsiz / (eps^2+gmax); //CFL condition,the movement is no larger than the size


  /* Attempt motion of the mesh: if the moved mesh has an almost null or flipped element, restart the operation with a smaller step */
  chkvoltri = checkmovemesh(Th,[x+step*grx,y+step*gry]); //check, give the samllest surface

  if( chkvoltri < epsvoltri ) { //potential to inverse the triangle
    cout<<"Iteration "<<n<<" rejected; inverted triangle."<<endl;
    coef *= 0.5;
    continue;
  }

  /* Else, effectively move the new mesh */
    Dh = movemesh(Th,[x+step*grx,y+step*gry]);

  /* Resolution of the state equation */
  uox = ux;
  uoy = uy;
  elas;

  /* Evaluation of the new objective function */
  vol    = Th.area;
  newobj = J + ell*vol; //compute the new objective function

  /* Decision */
  if( newobj < obj+tol*abs(obj) || coef <= coefmin ) {
    cout<<"Iteration "<<n<<" accepted; objective: "<<obj<<" ---> "<<newobj<<endl;
    cout<<"Volume: " << vol << endl;
    obj   = newobj;
    coef  = min(coefmax,1.02*coef);
    Th    = Dh;

    /* Adapt the mesh to the current solution of the elasticity system */
    //update the mesh to suit better for ux,uy,
    //hmin, hmax, size of the triangle min and max
    //let the thin part be possible to mesh
    Th = adaptmesh(Th,[ux,uy],hmin=0.01,hmax=0.05);

    hMax = hTriangle; // get sizes of all triangles, P0 function
    meshsiz = hMax[].max; // get maximal triangle size
    cout << meshsiz << endl;
    alpha = (2.0*meshsiz)^2;
    chidir = locdir();
    plot(Th,wait=0);
  }
  else { //if the objective function doesn't decrease..
    cout<<"Iteration "<<n<<" rejected; objective: "<<obj<<" v.s. "<<newobj<<endl;
    coef  = max(coefmin,0.6*coef);
    ux    = uox;
    uy    = uoy;
  }
}

/* Print mesh and solution */
//savemesh(Th,"Cantilever.mesh");
//savesol("Cantilever.sol",Th,[ux,uy]);
