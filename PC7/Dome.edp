/* Geometric optimization of the shape of a cantilever */
load "medit"

verbosity = 0;

int Gamma=0,GammaD=1;

/* Border of the initial domain */
border left1(t=0.0,1.0){x = 0.0; y = 1.0-t; label = GammaD;};
border left2(t=0.0,1.0){x = 1.0-t; y = 2.0-t; label = GammaD;};
border bottom(t=0.0,2.0){x=t; y=0.0; label=GammaD;};
border right1(t=0.0,1){x = 2.0; y = t; label = GammaD;};
border right2(t=0.0,1){x = 2.0-t; y = 1.0+t; label = GammaD;};
border h1 (t=0.0,2.0*pi){x=0.7+0.2*cos(t); y=0.5+0.2*sin(t); label=Gamma;};
border h2 (t=0.0,2.0*pi){x=1.3+0.2*cos(t); y=0.4+0.2*sin(t); label=Gamma;};
/* Create, then display initial mesh */
int m=10;
mesh Th = buildmesh( left1(m) + left2(m*sqrt(2))
          + bottom(2*m) + right1(m) + right2(m*sqrt(2))
          +h1(-m*0.6*pi)
          +h2(-m*0.6*pi));
//plot(Th,wait=0);

/* Parameters */
real eps = 1.e-6;
real gx = 0.0;
real gy = -1.0;
real mu = 0.3846;
real lambda = 0.5769;
real cply = 0.0;
real obj = 0.0,newobj = 0.0;
mesh Dh;
int nit = 243;

real gmax;
real coef = 0.1;
real coefmax = 0.2;
real coefmin = 0.001;
real step;
real chkvoltri;
real epsvoltri = 1.e-6;
real tol = 0.001;
real tgv = 1.e10;
real vol = 0.0;
real ell = 100;
real muel = 0.3846;
real lambdael = 0.5769;
string s;
real flux=100.0;
real u1=1;
real u2=1;
real T1=100;
real T0=20;


// /* Finite element spaces: P1 elements for the resolution of the linearized elasticity system */
fespace Vh(Th,P1);
fespace Vh0(Th,P0);

// /* Functions */
Vh   ux,uy,vx,vy,grx,gry,ng,uox,uoy,chidir;
Vh0  gr0;

Vh T,Q,Phi,Psi,Told,Qold;


Vh0 hMax = hTriangle; // get sizes of all triangles
real meshsiz = hMax[].max; // get maximal triangle size
real alpha = (2.0*meshsiz)^2; //regularization parameter
macro grad2(ux,uy) [dx(ux),dy(ux),dx(uy),dy(uy)]//
macro div(ux,uy) (dx(ux)+dy(uy))//
macro grad(u) [dx(u),dy(u)]//


/* Linearized elasticity system */
problem temp(T,Phi,solver=Crout)=
  int2d(Th)( grad(T)'*grad(Phi)  -[u1,u2]'*grad(Phi)*T )
  -int1d(Th,Gamma)(flux*Phi)
  +on(GammaD,T=0);
temp;
plot(T,wait=1);
//

problem adjoint(Q,Psi,solver=Crout)=
  int2d(Th)(2*(T-T0)*Psi )
  +int2d(Th)(grad(Psi)'*grad(Q))
  -int2d(Th)([u1,u2]'*grad(Q)*Psi)
  +on(GammaD,Q=0);
adjoint;
plot(Q,wait=1);

gr0=div(T,Q);

/* Localization function for nodes to be frozen */
func real locdir() {
  if ( y<=0.01  || x>=1.99 || x<=0.01) return(0);
  else return(0.0);
}
chidir = locdir();
//
// /* Tangential derivative */
//macro Dt(u) [dx(u)-(dx(u)*N.x+dy(u)*N.y)*N.x,dy(u)-(dx(u)*N.x+dy(u)*N.y)*N.y] // EOM
//
// /* Extension / regularization problem */
// problem velext([grx,gry],[vx,vy],solver=Crout) =
//   int2d(Th)(mu*(2.0*dx(grx)*dx(vx) + (dx(gry)+dy(grx))*(dx(vy)+dy(vx)) + 2.0*dy(gry)*dy(vy))
//                 + lambda*(dx(grx)+dy(gry))*(dx(vx)+dy(vy)) + (1.0+chidir*tgv)*(grx*vx+gry*vy) )
//   + int1d(Th,Gamma)( alpha*(Dt(grx)'*Dt(vx) + Dt(gry)'*Dt(vy)) )
//   - int1d(Th,Gamma)( gr0*(N.x*vx+N.y*vy) )
//   + on(GammaD,GammaN,grx=0.0,gry=0.0);

// problem velext2([grx,gry],[vx,vy]) =
//    int2d(Th)(grad2(grx,gry)'*grad2(vx,vy))//+  (1.0+chidir*tgv)*(grx*vx+gry*vy) )
//    +int1d(Th,Gamma)(gr0*(N.x*vx+N.y*vy) )
//    +on(GammaD,grx=0.0,gry=0.0);

problem velext2([grx,gry],[vx,vy]) =
 //regularization, to avoid an external hole
 //if we delete this term, the mesh will move creazily
 int2d(Th)(grad2(grx,gry)'*grad2(vx,vy) + (1.0+chidir*tgv)*(grx*vx+gry*vy) )
 + int1d(Th,Gamma)( gr0*(N.x*vx+N.y*vy) )
 + on(GammaD,grx=0.0,gry=0.0);
//  + int1d(Th,omega)( alpha*(Dt(grx)'*Dt(vx) + Dt(gry)'*Dt(vy)) )
//


// problem velext3([grx,gry],[vx,vy],solver=Crout) =
//   int2d(Th)(2*e(grx,gry)'*e(vx,vy)+0.5*div(grx,gry)*div(vx,vy)
// //  + int1d(Th,omega)( alpha*(Dt(grx)'*Dt(vx) + Dt(gry)'*Dt(vy)) )
// +(1.0+chidir*tgv)*(grx*vx+gry*vy) )
//   - int1d(Th,Gamma)( gr0*(N.x*vx+N.y*vy) )
//   + on(GammaD,grx=0.0,gry=0.0);


// /* Objective function */
macro J() ( int2d(Th)((T-T0)^2)) // EOM


/* (Negative) shape gradient of J */
macro dJ() {
  gr0= ((T-T0)^2 +grad(T)'*grad(Q) );
  velext2;
} // EOM

/* Initialization */
temp;
adjoint;
/* Initial value of the objective function */
vol     = Th.area;
obj     = J + ell*(3-vol);
real[int] vals(nit);
vals[0]=obj;

/* Main optimization loop */
for(int n=1; n<nit; n++){

  /* Computation of the shape gradient as a P1 function and size of the time step */
  dJ;
  ng = sqrt(grx*grx+gry*gry);
  gmax = ng[].max;
  step = coef*meshsiz / (eps^2+gmax);

  /* Attempt motion of the mesh: if the moved mesh has an almost null or flipped element, restart the operation with a smaller step */
  chkvoltri = checkmovemesh(Th,[x+step*grx,y+step*gry]);

  if( chkvoltri < epsvoltri ) {
    cout<<"Iteration "<<n<<" rejected; inverted triangle."<<endl;
    coef *= 0.5;
    continue;
  }

  /* Else, effectively move the new mesh */
  Dh = movemesh(Th,[x+step*grx,y+step*gry]);

  /* Resolution of the state equation */
  Told = T;
  Qold = Q;
  temp;
  adjoint;

  /* Evaluation of the new objective function */
  vol    = Th.area;
  newobj = J +ell*(3-vol);

  /* Decision */
  if( newobj < obj+tol*abs(obj) || coef <= coefmin ) {
    cout<<"Iteration "<<n<<" accepted; objective: "<<obj<<" ---> "<<newobj<<endl;
    cout<<"Volume: " << vol << endl;
    obj   = newobj;
    coef  = min(coefmax,1.02*coef);
    //coef  = min(coefmax,1.5*coef);
    Th    = Dh;
    /* Adapt the mesh to the current solution of the elasticity system */
    Th = adaptmesh(Th,T,hmin=0.05,hmax=0.1);

    hMax = hTriangle; // get sizes of all triangles
    meshsiz = hMax[].max; // get maximal triangle size
    cout << meshsiz << endl;
    //alpha = (2.0*meshsiz)^2;
    //chidir = locdir();
    plot(Th,wait=0);
  }
  else {
    cout<<"Iteration "<<n<<" rejected; objective: "<<obj<<" v.s. "<<newobj<<endl;
    coef  = max(coefmin,0.6*coef);
    T    = Told;
    Q    = Qold;
  }
  vals[n] =obj;
}
real[int] dis = 1:vals.n;
plot([dis,vals],wait=1,cmm="Evoluion of cost function");
// /* Print mesh and solution */
// //savemesh(Th,"Cantilever.mesh");
// //savesol("Cantilever.sol",Th,[ux,uy]);
