// Optimal radiator                  //
//                                   //
// Ecole Polytechnique, MAP 562      //
// Copyright G. Allaire, 2004        //
// 	     		 	     //
// modified by T. Wick, N. Spillane, B. Bogosel  //


//Problem parameters
int niter=400;			// Number of total iterations
int npen= 100;			// Starting iterations without penalization
int n=20;			// Size of the mesh
real lagrange=1.;		// Lagrange multiplier for the volume
real lagmin, lagmax ;		// Lower and upper bounds of the Lagrange multiplier
int inddico ;	    		// Counter of iterations of the dichonomy problem
real objectivefct;		// Objective function
real volume0;			// Initial volume
real volume,volume1;		// Current volume
real maxstep = 0.05;

real gx=0,gy=-1;

real E=1;			// Young modulus
real nu=0.3;			// Poisson coefficient (between -1 and 1/2)

real lambda=E*nu/((1.+nu)*(1.-2.*nu));
real mu=E/(2.*(1.+nu));

real p = 1;

verbosity = 0;

real hmin = 0.;
real hmax = 1;
real TOL = 1e-6;

real step = 0.1;

// Some output commands
string caption;			// caption for graphical outputs
real[int] vviso(21);
for (int i=0;i<21;i++)
vviso[i]=i*0.05 ;



/////////////////////////////////
// Defining the two phases
// and the characteristic function theta
/////////////////////////////////
real alpha=0.0001;
real beta=1;
func theta0=(x>0.1)*(x<0.9)*(y<0.9) ;

//area omega
func k =(x>=1.75) *(x<=2)*(y>=0.25) *(y<=0.75);

//////////////////////////////// 	1:Dirichlet condition
// Definition of the domain   // 	2:Neumann condition
//////////////////////////////// 	3:Non-homogen. Neumann (temp. flux)
mesh Th ;

int GammaD=1,GammaN=2,Gamma=3,GammaZ=10;


real[int] xL = [0, 2, 2, 2, 2, 1, 1, 0];
real[int] yL = [0, 0, 0.375, 0.625,1,1,2,2];
int[int] labelL = [Gamma,Gamma,GammaN,Gamma, Gamma,Gamma , GammaD,Gamma];
int[int] numberL = n*[2,0.375,0.25,0.375,1,1,1,2];

border Lbord(t=0,1; i){
   int nexti = (i+1)%xL.n;
   x = (1-t)*xL[i]+t*xL[nexti];
   y = (1-t)*yL[i]+t*yL[nexti];
   label = i;
};

plot(Lbord(numberL),wait=1);
Th=buildmesh(Lbord(numberL));
plot(Th,wait=1);

//////////////////////////////////
// Defining the finite elements //
//////////////////////////////////

fespace Vh0(Th,P0);
fespace Vh2(Th,P2);

// Solution variable: T
// Test function: v
Vh2 u,v,w,s,p1,p2,Te,Xiang;

// P0-space (constants) for
// the characteristic functions
// and the density (similar to geometric optimization)
Vh0 theta,density, thetb,A,tau,gradient,thetaold;
//To see the domain omega
Vh0 omega=1;
omega=omega*k;
plot(omega, fill=1,wait=1);
////////////////////////////////////
// Proportions of the two phases  //
////////////////////////////////////
theta = 0.4;//1-theta0;//1-0.280379;//theta0 ;


///////////////////////////////
// Implementation of the PDE //
///////////////////////////////

real sqrt2 = sqrt(2);

macro e(u,v) [dx(u),dy(v),(dx(v)+dy(u))/sqrt2]//
macro div(u,v) (dx(u)+dy(v))//


macro grad(u) [dx(u),dy(u)]//

problem elasticity([u,v],[w,s]) =
    int2d(Th)(A*(2.*mu*e(u,v)'*e(w,s)
             +lambda*div(u,v)*div(w,s)))
   -int1d(Th,GammaN)(gx*w+gy*s)
    +on(GammaD,u=0,v=0);

problem adjoint([p1,p2],[Te,Xiang])=
    int2d(Th)(A*(2.*mu*e(p1,p2)'*e(Te,Xiang)
             +lambda*div(p1,p2)*div(Te,Xiang)))
   +int2d(Th)(2*k*(u*Te+v*Xiang))
    +on(GammaD,p1=0,p2=0)
;
////////////////////////////////
// In the following, we perform
// the initialization of the
// volume and the objective function
////////////////////////////////

// Initial volume
volume0=int2d(Th)(theta);

// Solve once the PDE in order
// to get the initial temperature field.
// This temperature is then used
// to initialize the objective function.
A= (alpha*(1-(theta)^p)+beta*(theta)^p);
elasticity;
adjoint;
macro J() int2d(Th)((u^2+v^2)*k)//EOM
// Compute the objective function
objectivefct = J;
cout<<"Initialization. Objective fct = "<<objectivefct<<" Volume = "<<volume0<<endl;


// Update the thetb (phase 2)

// Visualization
int iter;
iter=0;
caption="Iteration "+iter+", Objective fct= "+objectivefct+", Volume="+volume0;
plot(Th,theta,fill=1,value=0,viso=vviso,cmm=caption,wait=0);

// Macro for truncation
macro trunc(u,mm,MM) min(max(u,mm),MM)// END of macro

// Macro for projection on the integral constraint

// !!!! Do not write comments with "//" in macros since this
// terminates a macro in FreeFem. Use /*...*/ instead if you want
macro proj(u,u0,Vh) {
   real tmin = hmin-u[].max,tmax = hmax+u[].min;
   u  = trunc(u,hmin,hmax);
   real v0 = 1/Th.area*int2d(Th)(u);
   while(tmax-tmin>TOL&&abs(v0-u0)>TOL){
     real tmid = 0.5*(tmin+tmax);
     Vh testu = trunc(tmid+u,hmin,hmax);
     v0 = 1/Th.area*int2d(Th)(testu);
     if(v0<u0){
       tmin = tmid;
     }
     else{
       tmax = tmid;
     }
     /*cout << tmin << " " << tmax << " " << v0-u0 << endl;*/
     /*cout << v0 << " " << u0 << endl;*/
   }
   u = trunc(u+tmin,hmin,hmax);
}// END of macro



// Optimization loop		 //

real objold;
Vh2 uold,vold,p1old,p2old;

real[int] vals(niter);
vals[0] = objectivefct;
int accept;
for (iter=1;iter< niter;iter=iter+1)
{
      accept = 0;
      cout <<"Iteration " <<iter <<" ----------------------------------------" <<endl;

      uold = u;
      vold = v;
      p1old=p1;
      p2old=p2;
      objold = objectivefct;
      thetaold = theta;

      // Computing the energy density
      gradient = p*(theta)^(p-1)*(beta-alpha)*
               (2*mu*e(p1,p2)'*e(u,v)+lambda*div(p1,p2)*div(u,v));

      // Update the proportions of the two phases and
      // project them onto their limit values if necessary
      theta = thetaold-step*gradient;

      // Apply penalization (slide 67 in lecture chapter7.pdf), once
      // the "initial" number of iterations has been exceeded.
      //if (iter > npen) { theta = ( 1 - cos(pi*theta) )/2 ; };


      proj(theta,volume0/Th.area,Vh0);

      if(iter==npen){
        p = 2;accept=1;
      }

      if(iter==(npen+50)){
        p = 2.5;accept=1;
      }

      if(iter==(npen+100)){
        p = 3;accept=1;
      }

      if(iter==(npen+150)){
        p = 5;accept=1;
      }

      // After having computed all constraints
      // and the proportions of the two phases, we
      // solve the PDE (i.e., the thermal problem)
      A= (alpha*(1-(theta)^p)+beta*(theta)^p);
      elasticity;
      adjoint;
      //plot(T,wait=1);

      // Evaluate the cost functional

      objectivefct=J;

      //objectivefct=int1d(Th,GammaN)(gx*u+gy*v);
      vals[iter] = objectivefct;
      cout<<"Objective fct: "<<objectivefct<<" Volume: "<<volume <<endl;

      if(objectivefct<objold*1.00001|| accept==1){
         uold = u;p1old=p1;
         vold = v;p2old=p2;
         thetaold = theta;
         objold = objectivefct;
         step = 1.1*step;
         step = min(step,maxstep);
         // Finally we update the proportion
         volume = int2d(Th)(theta);
         caption="Iteration "+iter+", Objective fct "+objectivefct+", Volume="+volume;
         plot(theta,fill=1,value=0,viso=vviso,cmm=caption,wait=0);
      }
      else{
         cout << "Reject " << endl;
         iter = iter-1;
         step = step/2;
         u = uold;p1=p1old;
         v = vold;p2=p2old;
         theta = thetaold;
      }

      cout << "Step=" << step << endl;
      cout << "Theta min=" << theta[].min << "Theta max=" << theta[].max << endl;
}; // end of the optimization loop


// Final updates and visualization

caption="Final Shape, Iteration "+iter+", Objective fct "+objectivefct+", Volume="+volume;
plot(Th,theta,wait=1,fill=1,viso=vviso,cmm=caption);

real[int] dis(niter);
dis = 1:niter;
plot([dis,vals],cmm="Cost function evolution");
